
import std/re
import std/os
import std/parseopt
import std/strformat
import std/strutils

const HEADER_COMMENT: string = """###
# This Makefile was automatically generated by 'makemake'
# 
# Directly modifying this Makefile is allowed, but modifications may be overwritten by further uses of the makemake utility.
###
"""

const TARGETS_COMMENT: string = """###
# Targets:
###
"""

const OBJECTS_COMMENT: string = """###
# Intermediary objects:
###
"""

const PHONIES_COMMENT: string = """###
# Phony targets:
###
"""

# const REGEX_POUND_INCLUDE: re.Regex = re.re"#include\s\"(.*)\""

const MAIN: string = "main.c"
const OUT: string = "main.out"
const MAKEFILE: string = "Makefile"

const SRCDIR: string     = "src"
const INCLUDEDIR: string = "include"
const BUILDDIR: string   = "obj"
const BINDIR: string     = "bin"

const SRCEXT: string = "c"
const OBJEXT: string = "o"
const HDREXT: string = "h"
const OUTEXT: string = "out"

const CC: string      = "clang"
const CFLAGS: string  = "-Wall -Wextra -std=c2x -pedantic"
const LDFLAGS: string = ""
const DBFLAGS: string = "-g3 -glldb"

const MODE_RELEASE: string = "RELEASE"
const MODE_DEBUG: string   = "DEBUG"

##
# Types
#
type 
    Parser = object
        description: string
        options: seq[Option]
        verbose: bool
        mode: string

    Option = object
        shortFlag: string
        longFlag: string
        noValue: bool
        helpText: string
        choices: seq[string]
        default: string
        handler: proc (p: var Parser, o: Option, value: string): void

##
# Parser::accept
#
proc accept(self: var Parser, optionStr: string, valueStr: string) =
    for i, option in self.options:
        if option.longFlag == optionStr or option.shortFlag == optionStr:
            option.handler(self, option, valueStr)

##
# Parser::setVerbose
#
proc setVerbose(self: var Parser, verbose: bool) =
    self.verbose = verbose

##
# Parser::setMode
#
proc setMode(self: var Parser, o: Option, value: string) =
    let cleanedValue = value.toUpper()

    for choice in o.choices:
        if choice == cleanedValue:
            self.mode = cleanedValue

    if self.mode.len == 0:
        let choicesStr = o.choices.join(",")
        echo fmt"Invalid mode '{cleanedValue}', must be one of: " & "{" & fmt"{choicesStr}" & "}"

##
# Parser::parse
#
proc parse(self: var Parser) =
    for kind, key, val in parseopt.getopt():
        case kind
        of parseopt.cmdLongOption, parseopt.cmdShortOption:
            self.accept(key, val)
        else:
            discard
    
    for option in self.options:
        if option.default.len > 0:
            option.handler(self, option, option.default)

##
# Parser::echoHelp
#
proc echoHelp(self: Parser) =
    var usage: string
    usage = "usage: makemake"
    for option in self.options:
        var flag: string
        if option.shortFlag.len > 0:
            flag = fmt("-{option.shortFlag}")
        else:
            flag = fmt("--{option.longFlag}")
        
        if option.noValue == false:
            flag = fmt("{flag} {option.longFlag.toUpper()}")

        usage = fmt("{usage} [{flag}]")

    var options: string
    options = "options:"
    for option in self.options:
        var choices: string = option.choices.join(",")
        if choices.len > 0:
            choices = "{" & fmt"{choices}" & "}"

        var flags: string = alignLeft(fmt("   -{option.shortFlag}, --{option.longFlag} {choices}"), 30)
        options = fmt("{options}\n{flags} {option.helpText}")

    echo usage
    echo ""
    echo self.description
    echo ""
    echo options

##
# Parser::echoState
#
proc echoState(self: Parser) =
    echo fmt("Parser[verbose:{self.verbose},mode:{self.mode}]")

##
# Entrypoint. Generates the Makefile using the provided arguments, writing the final output to the filesystem.
#
proc makemake(parser: Parser) =
    # TODO!
    parser.echoState()

##
# CLI interface.
#
proc cli() =
    var options = newSeq[Option]()

    options.add(Option(shortFlag: "v", longFlag: "verbose", noValue: true, helpText: "Verbose output", 
            handler: proc(p : var Parser, o: Option, value: string): void =
                p.setVerbose(true)
        )
    )
    options.add(Option(shortFlag: "h", longFlag: "help", noValue: true, helpText: "Help text",
            handler: proc(p : var Parser, o: Option, value: string): void =
                p.echoHelp()
                system.quit(0)
        )
    )
    options.add(Option(shortFlag: "m", longFlag: "mode", choices: @["RELEASE", "DEBUG"], default: "RELEASE", helpText: "Mode",
            handler: proc(p : var Parser, o: Option, value: string): void =
                p.setMode(o, value)
        )
    )

    var parser = Parser(description: "A maker of Makefiles", options: options)
    if os.paramCount() < 0:
        parser.echoHelp()
        system.quit(0)

    parser.parse()
    makemake(parser)

when isMainModule:
    cli()
